# 객체지향 프로그래밍(OOP) 핵심 개념 보고서

## 1. 캡슐화 (Encapsulation)
- **정의**: 복잡한 동작, 매커니즘, 속성 등을 숨기고 메서드의 기능만 제공
- **장점**: 내부 구조를 몰라도 기능 사용 가능
- **예시**: 
  - 자동차 엔진 구조는 모르지만, 엑셀을 밟으면 앞으로 나감
  - 라이브러리나 API import 사용: 구조를 몰라도 기능 제공

## 2. 상속 (Inheritance)
- **정의**: 상위 클래스의 기능과 변수를 하위 클래스에서 별도의 조치 없이 사용 가능
- **장점**:
  - 하위 클래스에서 추가 정의 없이 상위 기능 사용 가능
  - 하위에서 수정해도 상위 클래스에는 영향 없음
- **예시**: 사람 상위 클래스 → ‘먹다’ 기능 존재 → 한국인 하위 클래스에도 자동 적용

## 3. 다형성 (Polymorphism)
- **정의**: 변수 자체보다는 변수가 가리키는 객체와 그 객체의 행동이 결과 결정
- **예시**:
  - 사람 객체 + 축구() → 축구 선수
  - 사람 객체 + 요리() → 요리사
- **핵심**: 같은 메서드라도 객체에 따라 다른 행동 수행 가능

## 4. 오버로딩 (Overloading)
- **정의**: 같은 이름의 메서드지만 입력 타입/객체에 따라 다른 동작 수행
- **예시**:
  | 메서드 | 동작 |
  |--------|------|
  | 더하다(공부) | 학습 추가 |
  | 더하다(물) | 물 추가 |
  | 더하다(숫자) | 수 합산 |

## 5. 오버라이딩 (Overriding)
- **정의**: 상속받은 하위 클래스에서 상위 클래스 메서드를 수정하여 다른 출력
- **예시**:
  - 부모 클래스: `짖다`
  - 하위 클래스:
    - 개 → “멍멍”
    - 고양이 → “야옹”

## 6. 추상화 (Abstraction)
- **정의**: 상위 클래스에서 기능 이름 정의 → 하위 클래스에서 매커니즘 구현
- **핵심**: 기능 이름만으로는 의미 없고, 하위 클래스에서 실제 동작 구현 필요

## 7. 인터페이스 (Interface)
- **정의**: 최상위 클래스에서 하위 클래스에 꼭 구현되어야 하는 기능의 약속
- **특징**: 구현 강제, 다중 구현 가능

## 8. 추상 클래스 (Abstract Class)
- **정의**: 하위 클래스들의 공통적인 최상위 개념 정의
- **설계 팁**:
  - 큰 범위로 사용 → 작은 범위 사용 시 관리 복잡
  - A 기능 구현 → 세부 A-1, A-2 가능
  - 필수 기능(B-2 등) → 추상 메서드로 강제
- **한 줄 요약**:
> 추상 클래스는 하위 클래스들의 공통 틀을 정의하고, 반드시 구현해야 하는 기능은 추상 메서드로 강제하는 설계도다.

## OOP 개념 구조도
```
          [객체지향 프로그래밍(OOP)]
                       |
      ---------------------------------------
      |                 |                   |
  [캡슐화]           [상속]             [다형성]
      |                 |                   |
  내부 구조 숨김    상위 기능/속성 하위 전달   객체+메서드에 따라 행동 결정
      |                 |
  라이브러리/API     -----------------
  사용 예시         |               |
                  [오버로딩]     [오버라이딩]
                  (같은 이름,     (상속받아 재정의)
                   다른 입력)    |
                                    
                       |
                 [추상화/인터페이스/추상클래스]
                       |
       ----------------------------------------------
       |                      |                      |
   [추상화]               [인터페이스]          [추상 클래스]
 기능 이름 정의             구현 강제 약속        공통 틀 + 강제 기능
 하위에서 구체 구현       다중 구현 가능          큰 범주로 설계
```
