정진용 자바 기초 문법 1

1. JVM(Java Virtual Machine)
  1-1. JVM
  - JVM은 Java 프로그램을 실행하는 가상 머신으로, Java로 작성된 프로그램을 기계어로 번역하여 실행하는 역할을 한다.

  1-2. JVM의 주요 역할
  - Java 바이트코드 실행: Java는 소스코드(.java)를 바이트코드(.class)로 컴파일합니다. 이 바이트코드(.class)는 JVM에서 실행된다.

  - 메모리 관리: JVM은 실행 중인 Java 프로그램이 필요한 메모리를 할당하고 GC(Garbage Collection)을 담당하여 메모리 관리를 자동으로 해준다.

  - 실행 환경 제공: Java 애플리케이션을 실행할 때 필요한 Java API와 라이브러리를 제공한다.

  1-3. JVM 구성 요소
  - Class Loader(클래스 로더): 클래스를 메모리로 로드하는 역할을 한다.

  - Runtime Data Area(런타임 데이터 영역): Java 프로그램이 실행되는 동안 필요한 데이터를 저장하는 메모리 영역
    └ 힙 영역: 객체가 동적으로 생성되는 공간
    └ 스택 영역: 메서드 호출 시 로컬 변수 및 호출 정보를 저장하는 공
    └ 메서드 영역: 클래스의 메타데이터(클래스 이름, 메서드 정보 등) 저장

  - GC(Garbage Collector): 사용하지 않는 객체를 자동으로 메모리에서 제거, 메모리 누수 방지

2. JRE(Java Runtime Environment)
  2-1. JRE
  - JRE는 자바 프로그램을 실행하기 위한 소프트웨어 패키지이다.

  2-2. JRE의 구성 요소
  - JVM: 자바 바이트코드를 실행하는 가상 머신, JRE의 핵심 엔진이며 실제 실행은 JVM이 담당

  - Java Class Libraries(자바 클래스 라이브러리): 자바 표준 API(입출력, 네트워크, GUI, 데이터 처리 등), 자바 프로그램에서 흔히 사용하는 클래스들(java.lang, java.util 등)이 포함되어 있음

3. JDK(Java Development Kit)
  3-1. JDK
  - JDK는 자바 애플리케이션을 개발하고 실행할 수 있는 도구 모음입니다. 자바 프로그램을 작성하고(.java) 컴파일하고(.class) 디버깅하고 실행할 수 있는 개발 도구 세트이다.

  3-2. 구성요소
  - JRE(Java Runtime Environment): 자바 프로그램을 실행할 수 있는 환경, JDK에 포함되어 있고 내부에 JVM과 자바 표준 라이브러리를 포함

4. JDK, JRE, JVM 관계도
  ┌────────────────────┐
  │        JDK         │  ← 개발자용 (전체 세트)
  │ ┌────────────────┐ │
  │ │      JRE       │ │  ← 실행 환경 (JVM, 라이브러리)
  │ │ ┌────────────┐ │ │
  │ │ │   JVM      │ │ │  ← 실행 엔진 (바이트코드 실행)
  │ │ └────────────┘ │ │
  │ └────────────────┘ │
  └────────────────────┘
5. Class
  5-1. Class
  - 클래스란 객체를 만들기 위한 청사진

  5-2. 클래스의 구성 요소
  - Field: 객체의 속성, 변수
    └ ex) String name; int age;
  - Method: 객체의 동작, 기능
    └ ex) void start() { ... }
  - Constructor: 객체 생성 시 초기화하는 특별한 메서드
    └ ex) Person(String name) { ... }

  5-3. 클래스 사용의 목적
  - 코드 재사용성: 같은 클래스를 이용해 여러 객체 생성 가능
  - 조직화: 관련 있는 속성과 기능을 하나의 단위로 묶음
  - 객체지향 프로그래밍 실현: 추상화, 캡슐화, 상속, 다형성의 기반

6. Object(객체)
  6-1. Object
  - 객체란 클래스에 따라 만들어진 실체(인스턴스)이다.

  6-2. 객체의 구성 요소
  - 데이터(속성): 객체가 가진 정보(변수, 필드)

  - 기능(동작): 객체가 할 수 있는 행동(메서드)

7. Method(메서드)
  7-1. Method
  - 메서드는 특정 작업을 수행하는 코드의 블록(함수) 이며, 자바에서는 클래스 안에 정의된 함수를 메서드라고 한다.

  7-2. 메서드의 기본 구조(예시)
  [접근제어자] [리턴타입] 메서드이름([매개변수]) {
      // 실행할 코드
      [return 반환값;]  ← 리턴타입이 void가 아니라면 필요
  }

  ex)
  public int add(int a, int b) {
      return a + b;
  }
  - 메서드 선언: 클래스 내부에 메서드를 정의
  - 메서드 호출: 메서드를 실제로 실행
  - 매개변수: 메서드에 전달되는 입력값의 변수명
  - 인자: 메서드 호출 시 실제로 전달하는 값
  - 리턴값: 메서드가 호출 결과로 돌려주는 

  7-3. 메서드를 사용하는 이유
  - 코드 재사용: 여러 번 같은 기능을 반복해서 사용할 수 있음
  - 코드 가독성 향상: 기능별로 나누어 보면 이해하기 쉬움
  - 유지보수 용이: 기능 수정 시 해당 메서드만 수정
  - 모듈화: 큰 프로그램을 기능 단위로 쪼갤 수 있음
